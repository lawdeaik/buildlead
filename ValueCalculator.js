import React, { useState } from 'react';
import jsPDF from 'jspdf';

const ValueCalculator = ({ decrementUses, setStep }) => {
  const [formData, setFormData] = useState({
    businessName: '',
    niche: '',
    dreamOutcome: '',
    likelihood: 5,
    timeDelay: 5,
    effortSacrifice: 5,
    currentSituation: '',
    desiredResult: '',
    guarantee: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const calculateValue = () => {
    const { likelihood, timeDelay, effortSacrifice } = formData;
    // Hormozi's Value Equation: Value = (Dream Outcome × Perceived Likelihood) / (Time Delay × Effort & Sacrifice)
    const numerator = 10 * likelihood;
    const denominator = timeDelay * effortSacrifice;
    return (numerator / denominator * 10).toFixed(1);
  };

  const handleGenerate = () => {
    decrementUses();
    generatePDF();
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    const valueScore = calculateValue();

    // Title
    doc.setFontSize(24);
    doc.setTextColor(20, 184, 166); // Teal
    doc.text('Value Calculator Report', 105, 20, { align: 'center' });

    // Business Info
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(formData.businessName || 'Your Business', 20, 40);
    
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Niche: ${formData.niche}`, 20, 50);

    // Value Score
    doc.setFontSize(48);
    doc.setTextColor(20, 184, 166);
    doc.text(`${valueScore}`, 105, 80, { align: 'center' });
    
    doc.setFontSize(14);
    doc.setTextColor(100, 100, 100);
    doc.text('Value Score (out of 100)', 105, 90, { align: 'center' });

    // Hormozi's Value Equation
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text("Alex Hormozi's Value Equation", 20, 110);
    
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    const equation = 'Value = (Dream Outcome × Likelihood) / (Time Delay × Effort & Sacrifice)';
    doc.text(equation, 20, 120);

    // Dream Outcome
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text('Dream Outcome:', 20, 140);
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);
    const dreamText = doc.splitTextToSize(formData.dreamOutcome || 'Not specified', 170);
    doc.text(dreamText, 20, 148);

    // Current vs Desired
    let yPos = 148 + (dreamText.length * 5) + 10;
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text('Current Situation:', 20, yPos);
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);
    const currentText = doc.splitTextToSize(formData.currentSituation || 'Not specified', 170);
    doc.text(currentText, 20, yPos + 8);

    yPos += 8 + (currentText.length * 5) + 10;
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text('Desired Result:', 20, yPos);
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);
    const desiredText = doc.splitTextToSize(formData.desiredResult || 'Not specified', 170);
    doc.text(desiredText, 20, yPos + 8);

    // Scores
    yPos += 8 + (desiredText.length * 5) + 15;
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text('Component Scores:', 20, yPos);
    
    doc.setFontSize(10);
    doc.text(`Perceived Likelihood: ${formData.likelihood}/10`, 30, yPos + 10);
    doc.text(`Time to Result: ${11 - formData.timeDelay}/10 (faster is better)`, 30, yPos + 18);
    doc.text(`Ease of Achievement: ${11 - formData.effortSacrifice}/10 (easier is better)`, 30, yPos + 26);

    // Footer
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by BuildLead - Powered by Alex Hormozi\'s Value Equation', 105, 280, { align: 'center' });

    doc.save(`${formData.businessName || 'value-calculator'}-report.pdf`);
    
    alert('PDF Generated! Check your downloads folder.');
    setStep('select');
  };

  const niches = [
    'SaaS/Software', 'Coaching/Consulting', 'Ecommerce', 'Real Estate',
    'Fitness/Health', 'Finance/Investing', 'Marketing Agency', 'Legal Services',
    'Education/Training', 'Healthcare', 'B2B Services', 'Restaurant/Food',
    'Beauty/Wellness', 'Construction', 'Automotive', 'Other'
  ];

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-xl shadow-lg p-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">Value Calculator</h2>
        <p className="text-gray-600 mb-8">Based on Alex Hormozi's Value Equation</p>

        <div className="space-y-6">
          {/* Business Name */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Business/Product Name *
            </label>
            <input
              type="text"
              name="businessName"
              value={formData.businessName}
              onChange={handleChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="e.g., FitCoach Pro"
              required
            />
          </div>

          {/* Niche */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Niche/Industry *
            </label>
            <select
              name="niche"
              value={formData.niche}
              onChange={handleChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              required
            >
              <option value="">Select your niche...</option>
              {niches.map(niche => (
                <option key={niche} value={niche}>{niche}</option>
              ))}
            </select>
          </div>

          {/* Dream Outcome */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Dream Outcome - What transformation do you provide? *
            </label>
            <textarea
              name="dreamOutcome"
              value={formData.dreamOutcome}
              onChange={handleChange}
              rows="3"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="e.g., Lose 20 pounds and gain confidence to wear your favorite clothes again"
              required
            />
          </div>

          {/* Current Situation */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Current Situation - Where is your customer now?
            </label>
            <textarea
              name="currentSituation"
              value={formData.currentSituation}
              onChange={handleChange}
              rows="2"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="e.g., Struggling with weight, tried multiple diets without success"
            />
          </div>

          {/* Desired Result */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Desired Result - Where do they want to be?
            </label>
            <textarea
              name="desiredResult"
              value={formData.desiredResult}
              onChange={handleChange}
              rows="2"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="e.g., Confident, energetic, fitting into their dream wardrobe"
            />
          </div>

          {/* Sliders - Hormozi's Value Factors */}
          <div className="bg-teal-50 rounded-lg p-6 space-y-6">
            <h3 className="font-bold text-gray-900 mb-4">Value Equation Factors</h3>

            {/* Perceived Likelihood */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Perceived Likelihood of Success (1-10)
              </label>
              <p className="text-xs text-gray-600 mb-2">How confident are customers that your solution will work?</p>
              <input
                type="range"
                name="likelihood"
                min="1"
                max="10"
                value={formData.likelihood}
                onChange={handleChange}
                className="w-full"
              />
              <div className="flex justify-between text-sm text-gray-600">
                <span>Low (1)</span>
                <span className="font-bold text-teal-600">{formData.likelihood}</span>
                <span>High (10)</span>
              </div>
            </div>

            {/* Time Delay */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Time to Result (1-10)
              </label>
              <p className="text-xs text-gray-600 mb-2">How long before they see results? (Lower is better)</p>
              <input
                type="range"
                name="timeDelay"
                min="1"
                max="10"
                value={formData.timeDelay}
                onChange={handleChange}
                className="w-full"
              />
              <div className="flex justify-between text-sm text-gray-600">
                <span>Fast (1)</span>
                <span className="font-bold text-teal-600">{formData.timeDelay}</span>
                <span>Slow (10)</span>
              </div>
            </div>

            {/* Effort & Sacrifice */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Effort & Sacrifice Required (1-10)
              </label>
              <p className="text-xs text-gray-600 mb-2">How much work is required from the customer? (Lower is better)</p>
              <input
                type="range"
                name="effortSacrifice"
                min="1"
                max="10"
                value={formData.effortSacrifice}
                onChange={handleChange}
                className="w-full"
              />
              <div className="flex justify-between text-sm text-gray-600">
                <span>Easy (1)</span>
                <span className="font-bold text-teal-600">{formData.effortSacrifice}</span>
                <span>Hard (10)</span>
              </div>
            </div>
          </div>

          {/* Value Score Preview */}
          <div className="bg-gradient-to-r from-teal-500 to-blue-500 rounded-lg p-6 text-white text-center">
            <div className="text-sm mb-2">Your Value Score</div>
            <div className="text-5xl font-bold">{calculateValue()}</div>
            <div className="text-sm mt-2">out of 100</div>
          </div>

          {/* Generate Button */}
          <button
            onClick={handleGenerate}
            className="w-full bg-gradient-to-r from-teal-600 to-blue-600 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:from-teal-700 hover:to-blue-700 transition-all transform hover:scale-105 shadow-lg"
          >
            Generate Value Calculator PDF
          </button>
        </div>
      </div>
    </div>
  );
};

export default ValueCalculator;