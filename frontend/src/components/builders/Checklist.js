import React, { useState } from 'react';
import jsPDF from 'jspdf';

const Checklist = ({ decrementUses, setStep }) => {
  const [formData, setFormData] = useState({
    businessName: '',
    niche: '',
    checklistTitle: '',
    checklistDescription: '',
    targetAudience: '',
    items: [
      { item: '', description: '' }
    ]
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleItemChange = (index, field, value) => {
    const newItems = [...formData.items];
    newItems[index][field] = value;
    setFormData(prev => ({ ...prev, items: newItems }));
  };

  const addItem = () => {
    if (formData.items.length < 20) {
      setFormData(prev => ({
        ...prev,
        items: [...prev.items, { item: '', description: '' }]
      }));
    }
  };

  const removeItem = (index) => {
    if (formData.items.length > 1) {
      const newItems = formData.items.filter((_, i) => i !== index);
      setFormData(prev => ({ ...prev, items: newItems }));
    }
  };

  const handleGenerate = () => {
    if (!formData.businessName || !formData.niche || !formData.checklistTitle) {
      alert('Please fill in all required fields');
      return;
    }

    const hasEmptyItems = formData.items.some(item => !item.item);
    if (hasEmptyItems) {
      alert('Please fill in all checklist items');
      return;
    }

    decrementUses();
    generatePDF();
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    
    // Title Page
    doc.setFontSize(24);
    doc.setTextColor(20, 184, 166);
    doc.text(formData.checklistTitle, 105, 40, { align: 'center' });
    
    doc.setFontSize(14);
    doc.setTextColor(100, 100, 100);
    doc.text(formData.businessName, 105, 55, { align: 'center' });
    
    if (formData.targetAudience) {
      doc.setFontSize(11);
      doc.text(`For: ${formData.targetAudience}`, 105, 65, { align: 'center' });
    }
    
    if (formData.checklistDescription) {
      doc.setFontSize(10);
      const descLines = doc.splitTextToSize(formData.checklistDescription, 170);
      doc.text(descLines, 105, 80, { align: 'center' });
    }

    let yPos = 110;

    // Checklist Items
    formData.items.forEach((item, index) => {
      if (yPos > 250) {
        doc.addPage();
        yPos = 30;
      }

      // Checkbox
      doc.setLineWidth(0.5);
      doc.rect(20, yPos - 4, 5, 5);

      // Item
      doc.setFontSize(11);
      doc.setTextColor(0, 0, 0);
      doc.setFont(undefined, 'bold');
      const itemText = doc.splitTextToSize(`${index + 1}. ${item.item}`, 160);
      doc.text(itemText, 30, yPos);
      yPos += itemText.length * 6;

      // Description
      if (item.description) {
        doc.setFontSize(9);
        doc.setTextColor(80, 80, 80);
        doc.setFont(undefined, 'normal');
        const descText = doc.splitTextToSize(item.description, 160);
        doc.text(descText, 30, yPos + 2);
        yPos += descText.length * 5 + 8;
      } else {
        yPos += 10;
      }
    });

    // Call to Action
    if (yPos > 230) {
      doc.addPage();
      yPos = 30;
    } else {
      yPos += 20;
    }

    doc.setFontSize(12);
    doc.setTextColor(20, 184, 166);
    doc.setFont(undefined, 'bold');
    doc.text('Need Help Implementing This Checklist?', 105, yPos, { align: 'center' });
    
    yPos += 10;
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);
    doc.setFont(undefined, 'normal');
    doc.text('Contact us to learn how we can help you achieve these results faster.', 105, yPos, { align: 'center' });

    // Footer
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by BuildLead', 105, 280, { align: 'center' });

    doc.save(`${formData.businessName.replace(/\s+/g, '-').toLowerCase()}-checklist.pdf`);
    
    alert('Checklist PDF Generated! Check your downloads folder.');
    setStep('select');
  };

  const niches = [
    'SaaS/Software', 'Coaching/Consulting', 'Ecommerce', 'Real Estate',
    'Fitness/Health', 'Finance/Investing', 'Marketing Agency', 'Legal Services',
    'Education/Training', 'Healthcare', 'B2B Services', 'Restaurant/Food',
    'Beauty/Wellness', 'Construction', 'Automotive', 'Other'
  ];

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-xl shadow-lg p-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">Action Checklist Builder</h2>
        <p className="text-gray-600 mb-8">Create actionable checklists that provide immediate value</p>

        <div className="space-y-6">
          {/* Business Name */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Business Name *
            </label>
            <input
              type="text"
              name="businessName"
              value={formData.businessName}
              onChange={handleChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="e.g., Success Academy"
              required
            />
          </div>

          {/* Niche */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Niche/Industry *
            </label>
            <select
              name="niche"
              value={formData.niche}
              onChange={handleChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              required
            >
              <option value="">Select your niche...</option>
              {niches.map(niche => (
                <option key={niche} value={niche}>{niche}</option>
              ))}
            </select>
          </div>

          {/* Checklist Title */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Checklist Title *
            </label>
            <input
              type="text"
              name="checklistTitle"
              value={formData.checklistTitle}
              onChange={handleChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="e.g., 10-Step Product Launch Checklist"
              required
            />
          </div>

          {/* Target Audience */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Target Audience
            </label>
            <input
              type="text"
              name="targetAudience"
              value={formData.targetAudience}
              onChange={handleChange}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="e.g., First-time entrepreneurs launching digital products"
            />
          </div>

          {/* Description */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              Checklist Description
            </label>
            <textarea
              name="checklistDescription"
              value={formData.checklistDescription}
              onChange={handleChange}
              rows="2"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              placeholder="Brief description of what this checklist helps achieve..."
            />
          </div>

          {/* Checklist Items */}
          <div className="border-t pt-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-gray-900">Checklist Items</h3>
              <button
                onClick={addItem}
                disabled={formData.items.length >= 20}
                className="bg-teal-600 text-white px-4 py-2 rounded-lg text-sm font-semibold hover:bg-teal-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
              >
                + Add Item
              </button>
            </div>

            {formData.items.map((item, index) => (
              <div key={index} className="bg-gray-50 rounded-lg p-6 mb-4">
                <div className="flex justify-between items-center mb-4">
                  <h4 className="font-semibold text-gray-900">Item {index + 1}</h4>
                  {formData.items.length > 1 && (
                    <button
                      onClick={() => removeItem(index)}
                      className="text-red-600 hover:text-red-800 text-sm"
                    >
                      Remove
                    </button>
                  )}
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Action Item *
                    </label>
                    <input
                      type="text"
                      value={item.item}
                      onChange={(e) => handleItemChange(index, 'item', e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
                      placeholder="e.g., Set up your landing page"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Description (Optional)
                    </label>
                    <textarea
                      value={item.description}
                      onChange={(e) => handleItemChange(index, 'description', e.target.value)}
                      rows="2"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
                      placeholder="Brief explanation or tips for this step..."
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Generate Button */}
          <button
            onClick={handleGenerate}
            className="w-full bg-gradient-to-r from-teal-600 to-blue-600 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:from-teal-700 hover:to-blue-700 transition-all transform hover:scale-105 shadow-lg"
          >
            Generate Checklist PDF
          </button>
        </div>
      </div>
    </div>
  );
};

export default Checklist;